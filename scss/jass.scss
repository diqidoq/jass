@use "sass:math";
@use "sass:list";
@use "sass:string";
@use "sass:map";
@use "sass:meta";
@use "sass:selector";

// enable trailing class addition for child elements.
// can be set for each component seperately, see below.
$enable-child-selectors: no; // yes/no (default:no)
$child-selector-extension: "--c > *"; // creates: "myclass--c > *"

// Choose the components you want to use. Don't mix the order of setting lines.
// Comment the components and its leading settings out (//) if you do not need them.
// Reduce the "step" settings to have a smaller footprint and less altering classes.

// ############ color component ############### //
// ---------------------------------------------//

// A custom color palette minimizes the colors present and ccs color component file size.
// By building an own palette of color types and their shades.
// In comparision to the color-generator below.
// But a color generator can help to build interesting complex palettes.

// Default custom demo palette here is 5 brightness shades of 6 colors.
// Feel free to extend or minify from 5 to 2 or 3 to 6, etc.
// Use the first row in list to define the 
// black and white point tendency of your color profile.
// It is recommended to use web safe or "web smart" colors like 5599FF or 59F.
// It is up to you how many colors you use and how you group them.
// 
// This gets overridden if $enable-color-generator: yes;
$color-preset: (
  'grey'    ('222','555','999','CCC','FFF'),
  'gold'    ('630','A51','D94','FC7','FEC'),
  'orange'  ('700','C30','F30','F63','FCB'),
  'red'     ('903','C05','F06','F68','FCD'),
  'rose'    ('607','A0A','E0F','E5F','EAF'),
  'violett' ('408','71B','A2F','B5F','CAF'),
  'blue'    ('029','04B','26E','59F','ACF'),
  'cyan'    ('034','056','089','0BC','6EF'),
  'green'   ('030','060','090','0C0','0F0'),
  'lime'    ('260','5B0','5E0','AF4','CF9')
);
// old default preset 1
// 222, 555, 999, CCC, FFF, // grey
// 630, A51, D94, FC7, FEC, // gold
// 903, C05, F06, F69, FCD, // red
// 607, A0A, D0F, E5F, EAF, // rose
// 408, 71B, A2F, B5F, CAF, // violett
// 029, 04B, 26E, 59F, ACF, // blue
// 072, 5B0, 5E0, AF4, CF9  // green
// old default preset 2
// 222, 555, 999, CCC, FFF, // grey
// 607, A0A, E0F, E5F, EAF, // rose
// 029, 04B, 36E, 69F, BCF, // blue
// 072, 5A0, 7E0, BF4, CF9, // green
// 903, C05, F06, F68, FBC, // red
// 630, 940, D83, FC7, EDC  // gold

// Enables color-generator (will override custom color-preset above)
// Note: this creates many color code classes if all red green blue steps are chosen below.
// Overrides previous $color-preset and refills it with generated colors.
$enable-color-generator: no;
// Therefor you need to choose the HEX steps included per channel below.
// Hint: modern websites barely use blacks below #111.
// Be warned: each step creates many multiplying css lines.
// Use all 16 color bits only for advanced projects or for color scheme testing.
// Then switch back to a custom palette or a minified version of the generator.

// Generator basis of 3-digit hex code "Websmart" color palette of
// 4096 colors in 16 bit steps from 0 to F in 3 channels
// Uncomment to enable this example and comment-out "websafe" colors below.
// $red:   (0 1 2 3 4 5 6 7 8 9 A B C D E F); 
// $green: (0 1 2 3 4 5 6 7 8 9 A B C D E F);
// $blue:  (0 1 2 3 4 5 6 7 8 9 A B C D E F);

// Generator basis of Traditional 3-digit hex code "Websafe" color palette of
// 216 colors in 6 bit steps from 0 to F in 3 channels.
$red:   (0 3 6 9 C F);
$green: (0 3 6 9 C F);
$blue:  (0 3 6 9 C F);

// Choose if color classes should target containing header elements.
// Creates additional header color classes with a trainling <h> element target
// in the selector so that you can color all headers in the inner elements group.
// Hint: small headers like h5, h6 barely stand out or need to be colored.
$colored-headers: ('h1','h2','h3');

// Creates additional link color classes with a trainling <a> element target
// in the selector so that you can color all links in the inner elements group.
$colored-links: yes;

// Creates additional inline element color classes with a trainling element target
// in the selector so that you can color them in the inner elements group.
$colored-inline-elements: ('strong', 'em', 'b', 'i', 'q', 'mark');

// Not recommended settings for big components like color:
$enable-child-selectors: no; // yes/no (default:no)
$override: no; // yes/no > !important  (default:no)

// short/long (long are better readable class names, short are faster)
$selectors: short;

// (name/code) 'name' creates c-blue-1, c-blue-2 / 'code' creates c-A06, c-F06 
// Takes only effect if $enable-color-generator: no;
$color-label: name;

// Turns class names from value based into incrementing index based.
// Makes selector and color-label settings obsolete.
$index-classes: no; // yes/no

@import "color";

// ############ shadow component ############### //
// ----------------------------------------------//

// Shadow presets for x y and glow
$shadows: 
"0-0-2",
"0-0-4",
"0-0-6",
"0-2-2",
"0-2-4",
"0-4-8"
;
// Each shadow is present with and without color definition.
// This way you can create shadows based on text color inheritance.
// Usually you want to pass $color-preset to shadow colors.
// But feel free to change the color profile for shadows here.
$shadow-colors: $color-preset;
$enable-child-selectors: no; // yes/no (default:no)
$override: no; // yes/no > !important

// Settings for index-classes and color-label of previous color component
// Inherits here for shadow colors.

@import "shadow";

// ############ border component ############### //
// ----------------------------------------------//

// Border and Radius
$border-width-units: 1,2,3,4,5,6,10,20;
$border-radius_units: 2,3,4,5,6,7,8,20,50,100;
$enable-child-selectors: no; // yes/no (default:no)
$override: no; // yes/no > !important

@import "border";

// ############ layout component ############### //
// ----------------------------------------------//

// Layouts (sets - we do not use the term grid. [README])
// Fixed and Fluid - feel free to add/replace with your own layouts.
// Width of bars is relative to set and count of bars.
// in/de-crease the amount of bars to create different resolutions.
$bars: 24; // units of divisions inside
$sets-fixed:
576, // each bars width in px: 24
768, // each bars width in px: 32
960, // each bars width in px: 40
// 1200, // each bars width in px: 50
1440, // each bars width in px: 60
// 1680, // each bars width in px: 70
1920, // each bars width in px: 80
// 2160, // each bars width in px: 90
// 2400 // each bars width in px: 100
;
$sets-fluid: 80, 90, 100;
$break-points: $sets-fixed;
$enable-child-selectors: no; // yes/no (default:no)
$override: no; // yes/no > !important

@import "layout";

// ############ spacing component ############### //
// -----------------------------------------------//

// Margin & Padding and Min/Max Height/Width classes.
$steps-spacing: 16; $init-spacing: 4; // px
$steps-sizing: 8; $init-sizing: 50;  // px
$sizing-relative: 25,50,75,100; // %

$enable-child-selectors: no; // yes/no (default:no)
$override-spacing: no; // yes/no > !important
$override-sizing: no; // yes/no > !important

// Turns class names from value based into incrementing index based.
$index-classes: no; // yes/no

@import "spacing";

// ############ typography component ############### //
// --------------------------------------------------//

$font-size-unit: px; // px/em (default: px - em is overrated nowadays)

$font-sizes-px: 9,10,11,12,14,16,18,20,22,24,26;
$font-sizes-em: 0.5,0.6,0.7,0.8,0.9,1,1.5,2,2.5;

$selectors: short; // long/short class names

$enable-child-selectors: yes; // yes/no (default:no)
$override: no; // yes/no > !important

@import "typography";

// ############ tools component ############### //
// ---------------------------------------------//

// Tools is a collection of often used css in combination with other components.
// Like: cfx (clearfix) or oh (overflow-hidden), fl float-left, center-x, center-y etc.
$enable-child-selectors: yes; // yes/no (default:no)
$z-indexes: -999,-1,1,2,3,4,5,6,7,8,9,100,300,999;
$override: no; // yes/no > !important

@import "tools";
