@use "sass:math";
@use "sass:list";
@use "sass:string";
@use "sass:map";
@use "sass:meta";
@use "sass:selector";

$enable-targeting-childs: no; // yes/no - default no.
$child-target-modifier: "__c > *";

@function c($sel) {
  @if $enable-targeting-childs == yes {
    $sel: '.#{$sel},.#{#{$sel+$child-target-modifier}}';
  } @else {
    $sel: '.#{$sel}';
  }
  @return #{$sel};
}
@function sc($sel) {
  @if $enable-targeting-childs == yes {
    $sel: '&#{$sel},&#{$sel+$child-target-modifier}';
  } @else {
    $sel: '&#{$sel}';
  }
  @return #{$sel};
}

// Choose the components you want to use. Don't mix the order of setting lines.
// Comment the components and its leading settings out (//) if you do not need them.
// Reduce the "step" settings to have a smaller footprint and less altering classes.

// Use the first 3 items in list to define 
// the black and white point tendency of your color profile.
// It is recommended to use web safe colors like 5599FF or 59F.
// Expand or compress color theme like you want.
// It is up to you how many colors you use and how you group them.
// Default is a preset of 5 color sets from dark, mid to bright.
// c = background-color, tc = color, bc = border-color (width color id).
$enable-websafe-colors-preset: yes; // recommended
// Or enable full websafe color stack for testing.
$enable-websafe-colors-fullstack: no; // by default 4100 3hex colors!

// if $enable-websafe-colors-preset: yes;
// Feel free to extend or minify from 3 to 2 or 3 to 6, etc.
// All colors will be available as incremented id like c1, c2
// And as hex code class, like: .c334 which is .c1
// .c1 and .c3 will be the bright and dark (blackpoint) of your color preset.
$websafe-colors-preset: 
  334, 99A, EEF, // grey (incl. blackpoint bright & dark)
  A18, F0C, EBF, // rose
  15C, 69F, CDF, // blue
  5A0, 8F0, CF9, // green
  C05, F06, FBB, // red
  940, D83, FED  // gold
;

// if $enable-websafe-colors-fullstack: yes; 
// Make a full stack of websafe colors available.
// Choose the hex steps of each channel.
// Beware that the full list is over 4000! hex codes.
// All colors will be available as incremented id like c1, c2
// And as hex code class, like: .c334 which is .c1
// .c1 and .c3 will be the bright and dark (blackpoint) of your color preset.
$red: (0 1 2 3 4 5 6 7 8 9 A B C D E F);
$green: (0 1 2 3 4 5 6 7 8 9 A B C D E F);
$blue: (0 1 2 3 4 5 6 7 8 9 A B C D E F);

$override: no; // yes/no > !important
$index-classes: yes; // makes additional classes like c1, c2 available.
@import "color";

// Shadows and Shadow Effects
$shadows: 
"0-0-2",
"0-0-4",
"0-0-6",
"0-2-2",
"0-2-4"
;
// Each shadow is present with and without color definition.
// This way you can create shadows based on text color inheritance.
// Usually you want to pass colors to shadow colors.
// But feel free to change the color profile for shadows here.
$shadow-colors: $websafe-colors-preset;
$override: no; // yes/no > !important
@import "shadow";

// Border and Radius
$border-width-units: 1,2,3,4,5,6,10,20;
$border-radius_units: 2,3,4,5,6,7,8,20,50,100;
$override: no; // yes/no > !important
@import "border";

// Layouts (sets - we do not use the term grid. [README])
// Fixed and Fluid - feel free to add/replace with your own layouts.
// Width of bars is relative to set and count of bars.
// in/de-crease the amount of bars to create different resolutions.
$bars: 24; // units of divisions inside
$sets-fixed:
576, // each bars width in px: 24
768, // each bars width in px: 32
960, // each bars width in px: 40
// 1200, // each bars width in px: 50
1440, // each bars width in px: 60
// 1680, // each bars width in px: 70
1920, // each bars width in px: 80
// 2160, // each bars width in px: 90
// 2400 // each bars width in px: 100
;
$sets-fluid: 80, 90, 100;
$break-points: $sets-fixed;
$override: no; // yes/no > !important
@import "layout";

// Margin & Padding and Min/Max Height/Width classes.
$steps-spacing: 16; $init-spacing: 2; // px
$steps-sizing: 8; $init-sizing: 50;  // px
$sizing-relative: 25,50,75,100; // %

$enable-child-targets: no; // creates classes with trailing --c to target child elements.
$index-classes: yes; // makes additional classes like m1, m2 available.
$override-spacing: no; // yes/no > !important
$override-sizing: no; // yes/no > !important
@import "spacing";

// Anything around css text- and font- classes inkls sizes and weight and more.
$override: no; // yes/no > !important
@import "typography";

// Tools is a collection of often used css in combination with other components.
// Like: cfx (clearfix) or oh (overflow-hidden), fl float-left, center-x center-y etc.
$enable-child-targets: yes; // creates classes to target child elements.
$z-indexes: -999,-1,1,2,3,4,5,6,7,8,9,100,300,999;
$override: no; // yes/no > !important
@import "tools";
